1. Create project
    1.1 venv python version: 3.10.10
    1.2 .gitignore setting

2. Set MongoDB with docker-compose
    2.1 docker-compose.yml
        2.1.1 .env setting
        2.1.2 Docker volume for mongoDB
        2.1.3 docker-compose up -d
    2.2 About mongoDB container
        2.2.1 image: mongo:6.0.5
    2.3 Test connection in DataGrip
        2.3.1 Test connection to mongoDB was successful
        2.3.2 Trying to execute query was successful
            2.3.2.1 Query contents - /documents/query/test_query.txt




3. FastAPI project setup

        3.1 Dependency
            3.1.1 requirements.txt
                fastapi>=0.94.0, <0.95.0
                uvicorn>=0.20.0, <0.21.0
                pydantic>=1.9.0, <1.10.0
            3.1.2 requirements.dev.txt
                <EMPTY NOW>
            3.1.3 requirements.test.txt
                pytest>=7.1.0, <7.2.0
                flake8>=5.0.4, < 5.1.0


        3.2 Implement FastAPI
            3.2.1 main.py
                Create FastAPI app
                run uvicorn server

            3.2.2 /api/api.py
                create_app()
                    Endpoint
                        "/" -> docs
                        "/api/v1/demo" -> handlers/demo.py
                    router setting

            3.2.3 /api/responses.py
                class DetailResponse(BaseModel):
                    -> This class makes response format to json

            3.2.4 /api/handlers/
                -> Practical endpoint code is going to be here
                3.2.4.1 demo.py
                    router = APIRouter()
                    @router.get("/demo", response_model=DetailResponse)


        3.3 Make script for test
            /test.sh
                1. Run flake8





4. FastAPI demo

    4.1 Endpoint (prefix="/api/v1/demo")
        4.1.1 GET "/"
            Return simple string message as json

        4.1.2 GET "/state-counter"
            - Test for when initialize the variable inside of function
                - Every function calls from request, initialize function variable
                - But global variable that located outside of function saves state until Exit of App

        4.1.3 POST "/hello/name-in-body"
            - Receive BaseModel class as parameter
            - Send json in body, response it

        4.1.4 POST "/hello/{name}"
            - Send data with path

        4.1.5 GET "/hello-query"
            - Send data with query
            - Send data Key-Value as params
            - Result http address:
                "/hello-query?name=abcdef"

    4.2 Endpoint 2 (prefix="/api/v1/demo")

        4.2.1 DELETE "/delete"
            - Just show message now

        4.2.2 DELETE "/delete/{name}"
            - How to return 404 with json response
            - How to use
                - JSONResponse()
                - jsonable_encoder()

        4.2.3 GET "/error"
            - Raise 404 HTTP Exception


5. Entities and CRUD abstraction class

    5.1 Create movie entity
        - Path: /api/entities/movie.py
        - Definite field and its type

    5.2 Create CRUD abstraction class
        - Repository(abc.ABC)
            - create_movie()
            - get_by_id()
            - get_by_title()
            - update_movie()
            - delete_movie()
        - RepositoryException(Exception)





6. Implement for in-memory handle
    6.1 Path: /api/repository/movie/movie.py
    6.2 Implement class MemoryMovieRepository(MovieRepository)
        6.2.1 Declare dict for storage -> self._storage: dict = {}
        6.2.2 Implement each abstraction functions
            - create_movie()
            - get_by_id()
            - get_by_title()
            - update_movie()
            - delete_movie()





7. Implement movie entity class specifically
    7.1 Path: /api/entities/movie.py
    7.2 Make constructor (__init__ method)
        7.2.1 About "*" as parameter
            -> It makes that
                all parameters can only be passed using their parameter name
        7.2.2 Checking - movie_id should be required
    7.3 Hide each property with underscore and make @property functions
        7.3.1 Protected from modifying without setter method
            - Setter method example:
                    @field_name.setter
                    def field_name(self, new_value):
    7.4 Override __eq__ method
        -> Although they are different object (object reference address are not same)
            If all attribute are same each other,
            these two object consider same





8. Create unit tests for MemoryMovieRepository
    8.1 Path:
        8.1.1 Test code:
            api/repository/movie/test/test_movie.py
        8.1.2 Task cases module:
            api/repository/movie/test/testcases_of_test_movie.py
        8.1.3 Target module:
            api/repository/movie/movie.py

    8.2 Creating test-cases module
        - For unit tests, pytest and the pytest.mark.parametrize() decorator are used
        - In this situation,
            the decorator requires test and expected data as parameters,
            making the decorator code too long and less readable
        - Therefore, all test cases are separated and inserted into the test case module
        - In the test code, the decorator parametrize() loads test case data
            from testcases_of_test_movie.py as a list

    8.3 test_code() list
        def test_creat_movie():
        def test_get_by_id():
        def test_get_by_title():
        def test_update_movie():
        def test_update_movie_fail():
        def test_delete_movie():

    8.4 Code description
        8.4.1 Goals
            - Unit tests for the `MemoryMovieRepository` class in the `api.repository.movie.movie` module
            - The tests cover creating, retrieving, updating, and deleting movies from the repository,
            - Use `pytest` and `parametrize` to run multiple test cases with different inputs and expected results
        8.4.2 Implementation
            - The tests are implemented in the `test_movie.py` module
            - And use the `TestCases` class in the `testcases_of_test_movie.py` module
                to generate the test data
            - Custom exception class `RepositoryException` in the `api.repository.abstractions` module,
                which is used to test for expected errors when updating movies in the repository






9. Modify the MemoryMovieRepository to pass unit tests.

    9.1 Path:
        api/repository/movie/movie.py

    9.2 Major modifications:
        9.2.1 Change parameter name from 'id' to 'movie_id'
        9.2.2 Add a return value to every method as either a Movie object or a List[Movie]
        9.2.3 Update the 'setattr()' method inside the 'update_movie()' method:
                - Change from 'setattr(movie, key, value)' to 'setattr(movie, f"_{key}", value)'
                - Access 'Movie' entity fields directly since they do not have and need setters
                - If verification logic is required, setters will be created

    9.3 All tests pass successfully on local development environment

    9._4. Update MovieRepository abstract method return types
        -> Checking out "/documents/chore_or_fix_task.txt"





10. Asynchronous

    10.1 Path:
        api/repository/movie/abstractions.py
        api/repository/movie/movie.py
        api/repository/movie/test/test_movie.py

    10.2 Add Async and await keyword

    10.3 For async unit test
        10.3.1 Install 'pytest-asyncio' pip package
        10.3.2 Add '@pytest.mark.asyncio' decorator at test method

    10.4 All tests pass successfully on local development environment






11. Implement MongoMovieRepository
    11.1 Path:
        api/repository/movie/movie.py
    11.2 Make connection with mongoDB at __init__()
        11.2.1 Install pip package "motor"
                - async mongoDB driver
    11.3 method list
        - create_movie()
        - get_by_id()
        - get_by_title()
        - update_movie()
        - delete_movie()



_12 Refactoring

    _12.1 Move testcode independent directory
        Path:
            api/_test/repository/movie/test_memory.py
            api/_test/repository/movie/testcases_of_test_memory.py

    _12.2 Separate movie repository for in-memory and mongo
        Path:
            in-memory: api/repository/movie/memory.py
            mongo: api/repository/movie/mongo.py


